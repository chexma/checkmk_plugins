def inventory_sittig_devices(info):
    return [ ("Device "   + line[0], None) for line in info[0] ] + \
           [ ("Location " + line[0], None) for line in info[1] ]

sittig_device_states = {
   1: "unknown",
   2: "running",
   3: "warning",
   4: "testing",
   5: "offline",
   6: "down",
}


def check_sittig_devices(item, params, info):
    # This check is cluster-aware. If an entry appears
    # twice, we take the "better" result.

    results = []

    for i, devloc in [(0, "Device"), (1, "Location")]:
        for name, state in info[i]:
            if devloc + " " + name == item:
                state = int(state)
                statename = sittig_device_states.get(state, "invalid")
                if state == 2:
                    results.append( (0, "OK - %s running" % devloc) )
                elif state in [ 3, 4 ]:
                    results.append( (1, "WARN - %s in state %s" % (devloc, statename)) )
                elif state == 1:
                    results.append( (3, "UNKNOWN - unknown state") )   
                else:
                    results.append( (2, "CRIT - %s in state %s" % (devloc, statename)) )

    if len(results) == 0:
        return (3, "UNKNOWN - %s not found" % item.split(" ", 1)[0])
    elif len(results) == 1:
        return results[0]
    else: # cluster checks -> use 'best' result: # OK > WARN > UNKNOWN > CRIT
        best_state = results[0][0]
        best_entry = results[0]
        for state, text in results[1:]:
            if status_worse(best_state, state):
                best_state = state
                best_entry = (state, text)
            return best_entry

check_info['sittig_devices'] = (check_sittig_devices, "%s", 0, inventory_sittig_devices)

snmp_info['sittig_devices'] = [  
 ( ".1.3.6.1.4.1.33472.3.2.1", [ 3, 5, ] ),
 ( ".1.3.6.1.4.1.33472.5.2.1", [ 2, 3, ] )
]

snmp_scan_functions['sittig_devices'] = \
    lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.311.1.1.3.1.2"
